datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Набор вычисляемых характеритстик по нутриентам, свойственных Продукту, Блюду, Рациону
model NutritionFacts {
  id               Int      @id @default(autoincrement())
  kcal             Float    @default(0)
  mainFats         Float    @default(0)
  mainProteins     Float    @default(0)
  mainCarb         Float    @default(0)
  mainWater        Float    @default(0)
  mainAsh          Float    @default(0)
  subSugar         Float?    @default(0)
  subFiber         Float?    @default(0)
  subStarch        Float?    @default(0)
  subTransfats     Float?    @default(0)
  vitamin_a        Float?    @default(0)
  beta_carotene    Float?    @default(0)
  alpha_carotene   Float?    @default(0)
  vitamin_e        Float?    @default(0)
  vitamin_k        Float?    @default(0)
  vitamin_c        Float?    @default(0)
  vitamin_b1       Float?    @default(0)
  vitamin_b3       Float?    @default(0)
  vitamin_b4       Float?    @default(0)
  vitamin_b5       Float?    @default(0)
  vitamin_b6       Float?    @default(0)
  vitamin_b9       Float?    @default(0)
  vitamin_b12      Float?    @default(0)
  vitamin_b2       Float?    @default(0)
  vitamin_d        Float?    @default(0)
  vitamin_d2       Float?    @default(0)
  vitamin_d3       Float?    @default(0)
  calcium          Float?    @default(0)
  fluoride         Float?    @default(0)
  iron             Float?    @default(0)
  magnesium        Float?    @default(0)
  phosphorus       Float?    @default(0)
  potassium        Float?    @default(0)
  sodium           Float?    @default(0)
  zinc             Float?    @default(0)
  copper           Float?    @default(0)
  manganese        Float?    @default(0)
  selenium         Float?    @default(0)

  product  Product?     //  на него может ссылаться продукт
  dish     Dish?        //  на него может ссылаться блюдо
  // ration   Ration?   //  на него может ссылаться рацион

  @@map("nutrition_facts")
}

model Product {
  id               Int              @id @default(autoincrement())
  nutritionFactsId Int              @unique   //  ссылается на калькулируемые нутриенты
  name             String
  subname          String?
  categoryname     String?

  nutritionFacts   NutritionFacts     @relation(fields: [nutritionFactsId], references: [id])

  wasteWeightValue Float              @default(1.0)
  wasteWeightDesc  String             @default("Продукт в чистом виде")
  isDeleted        Boolean            @default(false)
  productMeasures  ProductMeasure[]   //  Единицы измерения продукта: два яблока

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, subname])
  @@map("products")
}

model ProductMeasure {
  id                    Int                   @id @default(autoincrement())
  productId             Int
  name                  String
  value                 Float
  desc                  String
  product               Product               @relation(fields: [productId], references: [id])
  dishProductMeasures   DishProductMeasure[]  //  ед. изм. продукта используется при составлении блюда

  @@map("product_measures")
}

model DishProductMeasure {
  id                  Int             @id @default(autoincrement())
  dishId              Int             //  связывает с блюдом
  productMeasureId    Int             //  связывает с ед. изм. продукта
  value               Float

  dish                Dish            @relation(fields: [dishId], references: [id])
  productMeasure      ProductMeasure  @relation(fields: [productMeasureId], references: [id])

  @@map("dish_product_measures")
}

model Dish {
  id                Int                   @id @default(autoincrement())
  nutritionFactsId  Int                   @unique
  name              String                @unique
  categoryname      String?
  description       String?
  weight            Float?
  isDeleted         Boolean               @default(false)

  nutritionFacts            NutritionFacts        @relation(fields: [nutritionFactsId], references: [id])
  dishProductMeasures       DishProductMeasure[]  //  Блюдо состоит из двух апельсинов
  dishMeasures              DishMeasure[]         //  Единицы измерения блюда: большая порция, маленькая порция
  // rationDishes    RationDish[]

  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt

  @@map("dishes")
}

model DishMeasure {
  id                    Int                   @id @default(autoincrement())
  dishId                Int                   // ед. изм. блюда ссылается на блюдо
  name                  String
  value                 Float
  desc                  String
  dish                  Dish                  @relation(fields: [dishId], references: [id])
  // dishProductMeasures   DishProductMeasure[]

  @@map("dish_measures")
}

model RationDishMeasure {
  id                Int         @id @default(autoincrement())
  rationId          Int     
  dishMeausreId     Int
  value             Float
  mealType          MealType
  
  ration            Ration      @relation(fields: [rationId], references: [id])

  @@map("ration_dish_measures")
}
model ProductDishMeasure {
  id                  Int         @id @default(autoincrement())
  rationId            Int
  productMeausreId    Int
  value               Float
  mealType            MealType
  
  ration              Ration      @relation(fields: [rationId], references: [id])
  
  @@map("product_dish_measures")
}

model Ration {
  id                  Int       @id @default(autoincrement())
  nutritionFactsId    Int
  name                String
  description         String
  userId              Int       @default(1)
  date                DateTime
  isDeleted           Boolean   @default(false)
  
  rationDishMeasures    RationDishMeasure[]
  productDishMeasures   ProductDishMeasure[]
  @@map("rations")
}


enum MealType {
  BREAKFAST
  LUNCH
  DINNER
  SNACK
  SUPPER
}

// model Ration {
//   id              Int             @id @default(autoincrement())
//   name            String       
//   description     String?
//   userId          Int             @default(1)
//   date            DateTime

//   nutritionFactsId Int            @unique
//   nutritionFacts  NutritionFacts  @relation(fields: [nutritionFactsId], references: [id])

//   isDeleted       Boolean         @default(false)
//   rationDishes    RationDish[]

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@unique([name, description, date])
//   @@map("rations")
// }



// model RationDish {
//   id            Int         @id @default(autoincrement())
//   rationId      Int
//   dishId        Int
//   value         Float
//   mealType      MealType
//   ration        Ration      @relation(fields: [rationId], references: [id])
//   dish          Dish        @relation(fields: [dishId], references: [id])

//   @@map("ration_dishes")
// }
