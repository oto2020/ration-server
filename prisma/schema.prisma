datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Набор вычисляемых характеритстик по нутриентам, свойственных Продукту, Блюду, Рациону
model NutritionFacts {
  id               Int      @id @default(autoincrement())
  kcal             Float    @default(0)
  mainFats         Float    @default(0)
  mainProteins     Float    @default(0)
  mainCarb         Float    @default(0)
  mainWater        Float    @default(0)
  mainAsh          Float    @default(0)
  subSugar         Float?    @default(0)
  subFiber         Float?    @default(0)
  subStarch        Float?    @default(0)
  subTransfats     Float?    @default(0)
  vitamin_a        Float?    @default(0)
  beta_carotene    Float?    @default(0)
  alpha_carotene   Float?    @default(0)
  vitamin_e        Float?    @default(0)
  vitamin_k        Float?    @default(0)
  vitamin_c        Float?    @default(0)
  vitamin_b1       Float?    @default(0)
  vitamin_b3       Float?    @default(0)
  vitamin_b4       Float?    @default(0)
  vitamin_b5       Float?    @default(0)
  vitamin_b6       Float?    @default(0)
  vitamin_b9       Float?    @default(0)
  vitamin_b12      Float?    @default(0)
  vitamin_b2       Float?    @default(0)
  vitamin_d        Float?    @default(0)
  vitamin_d2       Float?    @default(0)
  vitamin_d3       Float?    @default(0)
  calcium          Float?    @default(0)
  fluoride         Float?    @default(0)
  iron             Float?    @default(0)
  magnesium        Float?    @default(0)
  phosphorus       Float?    @default(0)
  potassium        Float?    @default(0)
  sodium           Float?    @default(0)
  zinc             Float?    @default(0)
  copper           Float?    @default(0)
  manganese        Float?    @default(0)
  selenium         Float?    @default(0)

  product  Product?     //  на него может ссылаться продукт
  dish     Dish?        //  на него может ссылаться блюдо
  // ration   Ration?   //  на него может ссылаться рацион

  @@map("nutrition_facts")
}

model Product {
  id               Int              @id @default(autoincrement())
  nutritionFactsId Int              @unique   //  ссылается на калькулируемые нутриенты
  name             String
  subname          String?
  categoryname     String?

  nutritionFacts   NutritionFacts     @relation(fields: [nutritionFactsId], references: [id])

  wasteWeightValue Float              @default(1.0)
  wasteWeightDesc  String             @default("Продукт в чистом виде")
  isDeleted        Boolean            @default(false)
  productMeasures  ProductMeasure[]   //  Единицы измерения продукта: два яблока

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, subname])
  @@map("products")
}

// Единица измерения продукта, например: один банан (шт.)
model ProductMeasure {
  id                        Int                       @id @default(autoincrement())
  productId                 Int
  name                      String
  grams                     Float
  desc                      String
  product                   Product                   @relation(fields: [productId], references: [id])
  dishProductMeasureCounts  DishProductMeasureCount[]  //  ед. изм. продукта используется при составлении блюда
  dRationProductMeasureCounts  DRationProductMeasureCount[]  //  ед. изм. продукта может использоваться при составлении рациона

  @@map("product_measures")
}

// Сколько ед. изм. (например: бананов) в блюде
model DishProductMeasureCount {
  id                  Int             @id @default(autoincrement())
  dishId              Int             //  связывает с блюдом
  productMeasureId    Int             //  связывает с ед. изм. продукта
  count               Float

  dish                Dish            @relation(fields: [dishId], references: [id])
  productMeasure      ProductMeasure  @relation(fields: [productMeasureId], references: [id])

  @@map("dish_product_measures")
}

// Блюдо
model Dish {
  id                Int                   @id @default(autoincrement())
  nutritionFactsId  Int                   @unique
  name              String                @unique
  categoryname      String?
  description       String?
  weight            Float?
  isDeleted         Boolean               @default(false)

  nutritionFacts                NutritionFacts              @relation(fields: [nutritionFactsId], references: [id])
  dishProductMeasureCounts      DishProductMeasureCount[]   //  Блюдо состоит из двух апельсинов
  dishMeasures                  DishMeasure[]               //  Единицы измерения блюда: большая порция, маленькая порция
  // rationDishes    RationDish[]

  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt

  @@map("dishes")
}

model DishMeasure {
  id                    Int                   @id @default(autoincrement())
  dishId                Int                   // ед. изм. блюда ссылается на блюдо
  name                  String
  grams                 Float
  desc                  String
  dish                  Dish                  @relation(fields: [dishId], references: [id])

  dRationDishMeasureCounts DRationDishMeasureCount[]//  ед. изм. блюда используется при составлении рациона

  @@map("dish_measures")
}

// Сколько в рационе на день содержится ед. изм. блюд
model DRationDishMeasureCount {
  id                Int         @id @default(autoincrement())
  dRationId         Int     
  dishMeasureId     Int
  count             Float
  mealType          MealType
  
  dRation           DRation       @relation(fields: [dRationId], references: [id])
  dishMeasure       DishMeasure   @relation(fields: [dishMeasureId], references: [id])

  @@map("dration_dish_measure_counts")
}

// сколько в дневном рационе содержится ед. изм. продуктов
model DRationProductMeasureCount {
  id                  Int             @id @default(autoincrement())
  dRationId           Int
  productMeasureId    Int
  count               Float
  mealType            MealType
  
  dRation             DRation           @relation(fields: [dRationId], references: [id])
  productMeasure      ProductMeasure    @relation(fields: [productMeasureId], references: [id])
  
  @@map("dration_product_measure_counts")
}

// Рацион на день для пользователя на дату
model DRation {
  id                  Int       @id @default(autoincrement())
  nutritionFactsId    Int
  userId              Int       @default(1)
  date                DateTime?
  isDeleted           Boolean   @default(false)
  
  dRationDishMeasureCounts      DRationDishMeasureCount[]
  dRationProductMeasureCounts   DRationProductMeasureCount[]
  @@map("d_rations")
}


enum MealType {
  BREAKFAST
  LUNCH
  DINNER
  SNACK
  SUPPER
}
