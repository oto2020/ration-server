datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model NutritionFacts {
  id               Int      @id @default(autoincrement())
  kcal             Float    @default(0)
  mainFats         Float    @default(0)
  mainProteins     Float    @default(0)
  mainCarb         Float    @default(0)
  mainWater        Float    @default(0)
  mainAsh          Float    @default(0)
  subSugar         Float?
  subFiber         Float?
  subStarch        Float?
  subTransfats     Float?
  vitamin_a        Float?
  beta_carotene    Float?
  alpha_carotene   Float?
  vitamin_e        Float?
  vitamin_k        Float?
  vitamin_c        Float?
  vitamin_b1       Float?
  vitamin_b3       Float?
  vitamin_b4       Float?
  vitamin_b5       Float?
  vitamin_b6       Float?
  vitamin_b9       Float?
  vitamin_b12      Float?
  vitamin_b2       Float?
  vitamin_d        Float?
  vitamin_d2       Float?
  vitamin_d3       Float?
  calcium          Float?
  fluoride         Float?
  iron             Float?
  magnesium        Float?
  phosphorus       Float?
  potassium        Float?
  sodium           Float?
  zinc             Float?
  copper           Float?
  manganese        Float?
  selenium         Float?

  product  Product?
  dish     Dish?
  ration   Ration?

  @@map("nutrition_facts")
}

model Product {
  id               Int      @id @default(autoincrement())
  name             String
  subname          String?
  categoryname     String?

  nutritionFacts   NutritionFacts   @relation(fields: [nutritionFactsId], references: [id])
  nutritionFactsId Int              @unique

  wasteWeightValue Float   @default(1.0)
  wasteWeightDesc  String  @default("Продукт в чистом виде")
  isDeleted        Boolean @default(false)
  measures         Measure[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, subname])
  @@map("products")
}

model Measure {
  id          Int     @id @default(autoincrement())
  productId   Int
  name        String
  value       Float
  desc        String
  product     Product @relation(fields: [productId], references: [id])
  dishMeasures DishMeasure[]

  @@map("measures")
}

model Dish {
  id              Int         @id @default(autoincrement())
  name            String      @unique
  categoryname    String?
  description     String?

  nutritionFactsId Int            @unique
  nutritionFacts  NutritionFacts  @relation(fields: [nutritionFactsId], references: [id])

  weight          Float?
  isDeleted       Boolean @default(false)
  dishMeasures    DishMeasure[]
  rationDishes    RationDish[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("dishes")
}

model DishMeasure {
  id         Int      @id @default(autoincrement())
  dishId     Int
  measureId  Int
  value      Float
  dish       Dish     @relation(fields: [dishId], references: [id])
  measure    Measure  @relation(fields: [measureId], references: [id])

  @@map("dish_measures")
}

model Ration {
  id              Int             @id @default(autoincrement())
  name            String       
  description     String?
  userId          Int             @default(1)
  date            DateTime

  nutritionFactsId Int            @unique
  nutritionFacts  NutritionFacts  @relation(fields: [nutritionFactsId], references: [id])

  isDeleted       Boolean         @default(false)
  rationDishes    RationDish[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, description, date])
  @@map("rations")
}

enum MealType {
  BREAKFAST
  LUNCH
  DINNER
  SNACK
  SUPPER
}

model RationDish {
  id            Int         @id @default(autoincrement())
  rationId      Int
  dishId        Int
  value         Float
  mealType      MealType
  ration        Ration      @relation(fields: [rationId], references: [id])
  dish          Dish        @relation(fields: [dishId], references: [id])

  @@map("ration_dishes")
}
